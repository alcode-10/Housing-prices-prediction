# -*- coding: utf-8 -*-
"""Practice_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QtK8HSj9wvkw1Mc4fYRyw0BzCBjH2XR7
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/BostonHousing.csv")
# print(df.head())

# print(df.info())
print(df.isnull().sum())

print(df.describe())

plt.figure(figsize=(10,6))
sns.heatmap(df.corr(),annot=True,cmap='coolwarm',fmt='.2f')
plt.title("Feature Correaltion Heatmap")
plt.show()
#the shows how strongly each feature affect the price

plt.figure(figsize=(6,4))
sns.scatterplot(x=df["rm"],y=df["medv"])
plt.title("Rooms vs Price")
plt.show()
#does no. of rooms affect the house prices

plt.figure(figsize=(6,4))
sns.scatterplot(x=df["lstat"],y=df["medv"])
plt.title("lstat vs price")
plt.show()

X=df[['rm','lstat','tax','ptratio','crim','indus','age','dis','nox']]#prediction feaatures
Y=df['medv']#target
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=42)
print(f"Training set size: {X_train.shape},Testing set size:{X_test.shape}")



from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(X_train,Y_train)
print("Model Coeffecients:",model.coef_)
print("Model Intercept:",model.intercept_)

y_pred=model.predict(X_test)
print(y_pred)

from sklearn.metrics import mean_squared_error,r2_score

mse=mean_squared_error(Y_test,y_pred)
r2=r2_score(Y_test,y_pred)

print(f"Mean Squared Error:{mse:.2f}")
print(f"R-squared:{r2:.2f}")

#handling outliers using interquartile method
plt.figure(figsize=(10,6))
sns.boxplot(data=df[['rm','tax','lstat','ptratio','crim','age','nox','dis']])
plt.xticks(rotation=90)
plt.title('Boxplot of Features to Detect Outfliers')
plt.show()
q1=df.quantile(0.25)
q3=df.quantile(0.75)
iqr=q3-q1

df_clean=df[~((df <(q1 -1.5 * iqr)) |(df> (q3+1.5 * iqr))).any(axis=1)]

mse=mean_squared_error(Y_test,y_pred)
r2=r2_score(Y_test,y_pred)

print(f"Mean Squared Error:{mse:.2f}")
print(f"R-squared:{r2:.2f}")

plt.figure(figsize=(6,4))
plt.scatter(Y_test,y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

#import models
from sklearn.tree import DecisionTreeRegressor

model_dt=DecisionTreeRegressor()
model_dt.fit(X_train,Y_train)
y_pred_dt=model_dt.predict(X_test)

print(f"Decision Tree R^2 Score:{r2_score(Y_test,y_pred_dt):.2f}")
plt.figure(figsize=(6,4))
plt.scatter(Y_test,y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

from sklearn.ensemble import RandomForestRegressor
model_rf=RandomForestRegressor(n_estimators=100,random_state=42)
model_rf.fit(X_train,Y_train)
y_pred_rf=model_rf.predict(X_test)

print(f"Random Forest R^2 Score:{r2_score(Y_test,y_pred_rf):.2f}")
plt.figure(figsize=(6,4))
plt.scatter(Y_test,y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

from xgboost import XGBRegressor
model_xgb=XGBRegressor()
model_xgb.fit(X_train,Y_train)
y_pred_xgb=model_xgb.predict(X_test)

print(f"XGBoost R^2 Score:{r2_score(Y_test,y_pred_xgb):.2f}")
plt.figure(figsize=(6,4))
plt.scatter(Y_test,y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

